import streamlit as st
import requests
import time

# 🔐 TMDb API Key
API_KEY = "46a75c46ed9733d00079ec554d11243f"
HEADERS = {"User-Agent": "Mozilla/5.0"}

# 🔁 Retry helper
def retry_request(url, retries=3, delay=2):
    for attempt in range(retries):
        try:
            response = requests.get(url, headers=HEADERS, timeout=10)
            response.raise_for_status()
            return response
        except requests.exceptions.RequestException as e:
            if attempt < retries - 1:
                time.sleep(delay)
            else:
                raise e

# 🔍 Get movie genres
def get_genres():
    try:
        url = f"https://api.themoviedb.org/3/genre/movie/list?api_key={API_KEY}&language=en-US"
        response = retry_request(url)
        genres = response.json().get("genres", [])
        return {g["name"].lower(): g["id"] for g in genres}
    except requests.exceptions.RequestException as e:
        st.error(f"🔌 Network/API error: {e}")
        return {}

# 🔍 Search movie by name
def search_movie_with_similar_names(query):
    url = f"https://api.themoviedb.org/3/search/movie?api_key={API_KEY}&query={query}"
    try:
        response = retry_request(url)
        results = response.json().get("results", [])
        return results
    except requests.exceptions.RequestException as e:
        st.error(f"🔌 Error connecting to TMDb: {e}")
        return []

# 🌍 Discover movies by rating or genre
def discover_movies_by_filter(**kwargs):
    base_url = f"https://api.themoviedb.org/3/discover/movie?api_key={API_KEY}&sort_by=vote_average.desc&vote_count.gte=100"
    if "vote_average" in kwargs:
        base_url += f"&vote_average.gte={kwargs['vote_average']}"
    if "with_genres" in kwargs:
        base_url += f"&with_genres={kwargs['with_genres']}"
    if "with_original_language" in kwargs:
        base_url += f"&with_original_language={kwargs['with_original_language']}"

    try:
        response = retry_request(base_url)
        return response.json().get("results", [])
    except requests.exceptions.RequestException as e:
        st.error(f"🔌 Error fetching movies: {e}")
        return []

# 🎨 Get movie poster
def get_poster_url(path):
    return f"https://image.tmdb.org/t/p/w500{path}" if path else "https://via.placeholder.com/150"

# 🎯 Streamlit UI
st.set_page_config(page_title="Movie Recommender", layout="wide")
st.title("🎬 Movie Recommendation System")

with st.sidebar:
    st.image("https://upload.wikimedia.org/wikipedia/commons/6/69/IMDB_Logo_2016.svg", width=120)
    st.title("🎥 Movie Finder")
    st.markdown("Enter a movie name, genre, or rating (e.g., `Inception`, `Action`, `8.5`).")
    st.markdown("---")
    st.markdown("Built with ❤ using Streamlit & TMDb")

user_input = st.text_input("🔍 Enter movie name, genre, or rating:")

recommendations = []
genres_dict = get_genres()

if user_input:
    query = user_input.strip().lower()

    # Check if it's a rating input
    if query.replace('.', '', 1).isdigit():
        rating = float(query)
        st.info(f"🎯 Showing movies with rating ≥ {rating}")
        recommendations = discover_movies_by_filter(vote_average=rating)

    # Check if it's a genre input
    elif query in genres_dict:
        genre_id = genres_dict[query]
        st.info(f"🎭 Showing movies in genre: {query.title()}")
        recommendations = discover_movies_by_filter(with_genres=genre_id)

    # Otherwise treat as movie name
    else:
        st.info(f"🎬 Searching for movies with names like: {query.title()}")
        recommendations = search_movie_with_similar_names(query)

    # Display results
    if recommendations:
        for i in range(0, len(recommendations), 5):
            cols = st.columns(5)
            for col, j in zip(cols, range(i, i + 5)):
                if j < len(recommendations):
                    movie = recommendations[j]
                    with col:
                        st.image(get_poster_url(movie.get("poster_path")), width=130)
                        st.write(f"{movie.get('title', 'No Title')}")
                        st.write(f"⭐ {movie.get('vote_average', 'N/A')}")
                        if movie.get("genre_ids"):
                            genre_names = [k.title() for k, v in genres_dict.items() if v in movie["genre_ids"]]
                            st.write(f"🎭 {' | '.join(genre_names)}")
    else:
        st.error(f"❌ No results found for '{user_input}'.")
